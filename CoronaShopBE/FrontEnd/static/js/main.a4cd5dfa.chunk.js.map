{"version":3,"sources":["Common/Wrap.js","Common/Util.js","Common/comm.js","Common/SimpleStateManager.js","UI/InputWithSubmit.js","Components/LandingPage/LandingPage.js","App.js","serviceWorker.js","index.js"],"names":["Wrap","props","children","UtilityFunctions","isDefined","item","undefined","isString","value","String","isNonEmptyString","BE","this","BE_URL","window","location","origin","axios","require","default","send_request","res1","console","log","test","JobId","res2","data","email","pw","body","res","retValue","UF","response","controller","config","headers","request","post","Object","freeze","SSM","Component","isLogged","isLogged_","LandingPage","click","e","preventDefault","className","login_square","renderMain","LoginForm","state","tryLogIn","success","SimpleStateManager","setIsLogged","setState","target","Form","onSubmit","onSubmitCustom","Group","controlId","Label","Control","type","placeholder","onChange","emailChanged","bind","Text","pwChanged","Button","variant","onClick","go_login","App","document","title","rel","href","integrity","crossOrigin","Boolean","hostname","match","onbeforeunload","history","replaceState","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a4cd5dfa.chunk.js","sourcesContent":["// react does not allow rendering batches of elements\r\n// this class is to wrap elements, to render batch of elements without compile error\r\nconst Wrap = (props) => props.children;\r\nexport default Wrap;","export const UtilityFunctions = {\r\n    \r\n    /**\r\n     * @description Checks if object is not null and not undefined.\r\n     * @returns false if object is null or undefined else returns true.\r\n     */\r\n    isDefined: (item) => {\r\n        return (item !== null && item !== undefined);\r\n    },\r\n\r\n    /**\r\n     * @param value the object to test\r\n     * @description Checks if @value is a string\r\n     * @returns true f object is a string\r\n     */\r\n    isString: (value) => {\r\n        return (typeof value === 'string' || value instanceof String);\r\n    },\r\n\r\n    /**\r\n     * @description Checks if the object is a non empty string\r\n     * @returns True if object is non empty string\r\n     */\r\n    isNonEmptyString : (item) =>{\r\n        \r\n        return (UtilityFunctions.isDefined(item) && UtilityFunctions.isString(item) && item !== \"\" && item !== '')\r\n    }\r\n}\r\n\r\n","// this class is used for communcation with the backend\r\n// using axios\r\n\r\nimport axios from 'axios';\r\nimport {UtilityFunctions as UF } from './Util';\r\n\r\nclass BE_Comm{\r\n    constructor(){\r\n        this.BE_URL = window.location.origin;\r\n        this.axios = require('axios').default;\r\n    }\r\n\r\n    async test(){\r\n        let res1 = await this.send_request(\"SellabelItem\",null);\r\n        console.log(res1);\r\n        let res2 = await this.send_request(\"SellabelItem/test\",{test:{JobId:\"asd\"}});\r\n        console.log(res2.data);\r\n    }\r\n\r\n    async tryLogIn(email,pw){\r\n        let body={\r\n            'email':email,\r\n            'pw':pw\r\n        }\r\n        let res;\r\n        try{\r\n            res = await this.send_request('Seller/Login',body);\r\n        }catch(exc){\r\n        }\r\n        let retValue = false;\r\n        if(UF.isDefined(res) && UF.isDefined(res.data.response))\r\n            retValue = res.data.response == \"True\";\r\n        return retValue;\r\n    }\r\n\r\n    async send_request(controller, body){\r\n        let config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Access-Control-Allow-Origin': 'null'\r\n            }\r\n        };\r\n        let request = this.BE_URL+'/api/'+controller;\r\n        let response = await axios.post(request,body,config);\r\n        return response;\r\n    }\r\n\r\n    \r\n}\r\n\r\n// singleton implementation for the BE module\r\nconst BE = new BE_Comm();\r\nObject.freeze(BE);\r\nexport default BE;\r\n","/**\r\n * @description this class is a singleton class that manages the state for an on\r\n *              going session, it will store information like if session is logged in and other stuff\r\n * \r\n */\r\nclass SimpleStateManager{\r\n    constructor(props){\r\n        this.isLogged = false;\r\n        this.email = \"\";\r\n    }\r\n\r\n    setIsLogged(isLogged_, email){\r\n        this.isLogged = isLogged_;\r\n        if (isLogged_)\r\n            this.email = email;\r\n        else\r\n            this.email = \"\";\r\n    }\r\n\r\n    getUserEmail(){\r\n        return this.email;\r\n    }\r\n}\r\n\r\nconst SSM = new SimpleStateManager();\r\n//Object.freeze(SSM);\r\nexport default SSM;","import React, { Component } from 'react'\r\nimport {InputGroup, Button, FormControl} from 'react-bootstrap';\r\nimport './ButtonSelection.css';\r\n\r\nexport default class InputWithSubmit extends Component {\r\n    \r\n    constructor(props){\r\n        super(props);\r\n        this.textInput = React.createRef();\r\n    }\r\n\r\n    handleApply(e){\r\n        let data = {\r\n            key: this.props.title,\r\n            value: this.textInput.current.value\r\n        };\r\n        this.props.applyCB(data);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <InputGroup size=\"sm\" className=\"mb-3 btn-group-sm inBox\">\r\n                <InputGroup.Prepend>\r\n                    <InputGroup.Text className=\"logName\">{this.props.title}</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <FormControl\r\n                placeholder={this.props.placeholder}\r\n                aria-label={this.props.title}\r\n                aria-describedby=\"basic-addon2\"\r\n                ref={this.textInput}\r\n                type={this.props.type}\r\n                />\r\n                <InputGroup.Append>\r\n                <Button variant=\"outline-secondary\" onClick={(e)=>{this.handleApply(e)}}>Apply</Button>\r\n                </InputGroup.Append>\r\n            </InputGroup>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Wrap from '../../Common/Wrap';\r\nimport BE from '../../Common/comm';\r\nimport {Form, Button} from 'react-bootstrap';\r\nimport './LandingPage.css';\r\nimport {UtilityFunctions as UF} from '../../Common/Util';\r\nimport InputWithSubmit from '../../UI/InputWithSubmit';\r\nimport SimpleStateManager from '../../Common/SimpleStateManager';\r\n\r\nexport default class LandingPage extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        //this.api = BE;\r\n        //this.SSM = SimpleStateManager;\r\n    }\r\n\r\n    go_login(click){\r\n        console.log(click);\r\n    }\r\n\r\n    onSubmitCustom(e){\r\n        e.preventDefault();\r\n    }\r\n\r\n    login_square(){\r\n        let ele = <LoginForm />;\r\n        return ele;\r\n    }\r\n\r\n    renderMain(){\r\n        let ele = <Wrap>\r\n            <div className=\"headerWelcome\">\r\n                <h3>Welcome to Corona Shops</h3>\r\n            </div>\r\n            <div className=\"loginForm\">\r\n                Please Login or <span>register.</span>\r\n                {this.login_square()}\r\n            </div>\r\n        </Wrap>;\r\n\r\n        return ele;\r\n    }\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <div>    \r\n                {this.renderMain()}     \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nclass LoginForm extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        let email = \"\";\r\n        if(UF.isDefined(props.email)){\r\n            email = props.email;\r\n        }\r\n        this.state={\r\n            email:email,\r\n            pw:\"\"\r\n        }\r\n    }\r\n\r\n    async go_login(e){\r\n        e.preventDefault();\r\n        let success = await BE.tryLogIn(this.state.email, this.state.pw);\r\n        SimpleStateManager.setIsLogged(success, this.state.email);\r\n    }\r\n\r\n    emailChanged(e){\r\n        this.setState({\r\n            email:e.target.value\r\n        })\r\n    }\r\n    pwChanged(e){\r\n        this.setState({\r\n            pw:e.target.value\r\n        })\r\n    }\r\n\r\n    render(){\r\n        let ele = <Wrap>\r\n            <Form onSubmit={this.onSubmitCustom}>\r\n                <Form.Group controlId=\"formBasicEmail\">\r\n                    <Form.Label>Email address</Form.Label>\r\n                    <Form.Control type=\"email\" placeholder=\"Enter email\" value={this.state.email} onChange={this.emailChanged.bind(this)}/>\r\n                    <Form.Text className=\"text-muted\">\r\n                    We'll never share your email with anyone else.\r\n                    </Form.Text>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"formBasicPassword\">\r\n                    <Form.Label>Password</Form.Label>\r\n                    <Form.Control type=\"password\" placeholder=\"Password\" value={this.state.pw} onChange={this.pwChanged.bind(this)} />\r\n                </Form.Group>\r\n                <Button variant=\"primary\" type=\"button\" onClick={e=>this.go_login(e)}>\r\n                    Submit\r\n                </Button>\r\n            </Form>\r\n        </Wrap>;\r\n        return ele;\r\n    }\r\n}","import React, { Component } from 'react';\nimport LandingPage from './Components/LandingPage/LandingPage';\nimport BE from './Common/comm';\nimport './App.css';\nimport SimpleStateManager from './Common/SimpleStateManager';\n\nclass App extends Component {\n\n  componentDidMount(){\n    document.title = \"Corona Shop\";\n  }\n\n  render() {\n    return (\n    <div className=\"App\">\n      <link\n        rel=\"stylesheet\"\n        href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\"\n        integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\"\n        crossOrigin=\"anonymous\"\n      />\n      <LandingPage />\n    </div>\n    )\n  \n}\n    \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nwindow.onbeforeunload = function(e){\n  e.preventDefault();\n  window.history.replaceState(null,\"\",window.location.origin);\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}